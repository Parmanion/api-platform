# RDF vocabularies
vocabularies:

    # Prototype
    -

        # RDF vocabulary to use
        uri:                  'https://schema.org/version/latest/schemaorg-current-http.rdf' # Example: 'https://schema.org/version/latest/schemaorg-current-http.rdf'

        # RDF vocabulary format
        format:               null # Example: rdfxml

# Namespace of the vocabulary to import
vocabularyNamespace:  'http://schema.org/' # Example: 'http://www.w3.org/ns/activitystreams#'

# IDs configuration
id:
    # Automatically add an id field to entities
    generate:             true
    # The ID generation strategy to use ("none" to not let the database generate IDs).
    generationStrategy:   uuid # One of "auto"; "none"; "uuid"; "mongoid"
    # Is the ID writable? Only applicable if "generationStrategy" is "uuid".
    writable:             false
    # Set to "child" to generate the id on the child class, and "parent" to use the parent class instead.
    onClass:              parent # One of "child"; "parent"



# OWL relation files containing cardinality information in the GoodRelations format
relations:            # Example: 'https://purl.org/goodrelations/v1.owl'
    # Default:
    - http://www.heppnetz.de/ontologies/goodrelations/v1.owl
checkIsGoodRelations: false

# A license or any text to use as header of generated files
header: |
    /*
     * This file is part of the Ecommerce package.
     *
     * (c) Pierre Pailley
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

# PHP namespaces
namespaces:
#     # The global namespace's prefix
#     prefix:               App\ # Example: App\
#     # The namespace of the generated entities
     entity:               Entity # Example: App\Entity
#     # The namespace of the generated enumerations
     enum:                 App\Enum # Example: App\Enum
#     # The namespace of the generated interfaces
     interface:            App\Model # Example: App\Model

# Generate interfaces and use Doctrine's Resolve Target Entity feature
useInterface:         false

# Doctrine
doctrine:
    # Use Doctrine's ArrayCollection instead of standard arrays
    useCollection:        true
    # The Resolve Target Entity Listener config file pass
    resolveTargetEntityConfigPath: false
    # Doctrine inheritance annotations (if set, no other annotations are generated)
    inheritanceAnnotations: []

# Symfony Validator Component
validator:
    # Generate @Assert\Type annotation
    assertType:           true

# The value of the phpDoc's @author annotation
author:               Pierre Pailley # Example: 'KÃ©vin Dunglas <dunglas@gmail.com>'

# Visibility of entities fields
fieldVisibility:      private # One of "private"; "protected"; "public"

# The list of types and properties we want to use
types:
    User:
        parent: false
        guessFrom: Person
        namespaces: { class: App\User, interface: App\User }
        properties:
            email: { unique: true }
            gender: ~
            familyName: ~
            givenName: { groups: [ public ] }
            telephone: ~
            memberOf: ~
    Offer:
        parent: false
        properties:
            itemOffered: { range: Service, mappedBy: offers, relationTableName: offer_service, cardinality: "(*..1)" }
            offeredBy: { range: Organization, inversedBy: makesOffer }
            price: { range: Number, ormColumn: 'type="decimal", precision=5, scale=1, options={"comment" = "price of offers"}'}
            priceCurrency: ~
    Organization:
        parent: false
        properties:
            legalName: ~
            logo: ~
            leiCode: ~
            makesOffer: { range: Offer, mappedBy: offeredBy }
            member: { range: User }
    Service:
        parent: false
        namespaces: { class: App\Service, interface: App\Service }
        properties:
            offers: { range: Offer, inversedBy: itemOffered, relationTableName: offer_service, cardinality: "(1..*)" }
            provider: { range: Organization }
    Rating:
        parent: false
        properties:
            ratingValue: { range: Number }
            author: { range: User }

# Annotation generators to use
annotationGenerators:
#     Defaults:
     - ApiPlatform\SchemaGenerator\AnnotationGenerator\PhpDocAnnotationGenerator
     - ApiPlatform\SchemaGenerator\AnnotationGenerator\DoctrineOrmAnnotationGenerator
     - ApiPlatform\SchemaGenerator\AnnotationGenerator\ApiPlatformCoreAnnotationGenerator
     - ApiPlatform\SchemaGenerator\AnnotationGenerator\ConstraintAnnotationGenerator
     - ApiPlatform\SchemaGenerator\AnnotationGenerator\SerializerGroupsAnnotationGenerator
